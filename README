We will be going through each page of the website, and pointing to the code that runs for that page.

To run our code, you must have ruby and rails installed, and run:

rake db:migrate:reset
rake db:setup
(the above setup command may take a while due to the large YAML file)

Then run 

rails server

and go to http://0.0.0.0:3000/ on chrome browser (enable google maps to look for your current location if it asks, and sign in with facebook).

We used bootstrap to assist with the front end development.

--------------------------------------

Code:

spork/scraping: JOHN OCCUPY THIS

spork/db:

- migrate: This folder contains all of the migration files that specifies the schema for the database. 
- final_seeds.yml file: occupies the database with real data that was scraped from the internet (~500,000 line file). 
- addPicturesScript.rb: Using the pictures that google image api retrieved, addPicturesScript.rb takes all of the .jpg files, parses each file name to get the restaurant name, queries the Restaurant database table to retrieve the id for the restaurant, and writes to the yaml file for each image to add Picture elements to the database data.
- addRatingScript.rb: Goes through each food item, retrieves the id, and writes 5 rating elements to the YAML file for each food item with random scores so that all food items have ratings.
- addRatingsToEachDishScript.rb: The database was changed to store an average rating field on each food item. This script went through each food item in the yaml file, calculated the average rating for that food item, then added the average rating as a column attribute into the yaml file.
- geoscrap.rb: After all of the addresses for the restaurants were scraped, it was necessary to occupy the database with the latitude and longitude coordinates for these addresses. geoscrap.rb was written to send HTTP requests to the Google Maps API to retrieve latitude and longitude values to write into the YAML file.
- schema.rb: auto generated by rails based on the models/migrations specified


spork/app/models:
- Each model specifies the types of objects that reside in the database. Many of them have field validations to ensure objects aren't saved that don't conform to certain criteria (ie. a rating must be between 1 and 5)


We will now discuss each page of the website and the associated controller, views, and javascript files. We'll discuss them as a user going through the site. The user starts at the homepage:

HOME PAGE (http://0.0.0.0:3000/):
- discuss code/files

From here, the user will probably enter a search term and location to arrive at the results page:

RESULTS PAGE:
- /spork/app/controllers/results_controller: The results controller handles the controller logic for the results page.  If an address was entered, it pulls the coordinates for the address using google maps. If the address entered isn't valid, then it will choose the user's current location as the address.  If the user isn't allowing their current location to be read, then it will use San Francisco.  The page does complex SQL queries to find all dishes whose dish name contains the search query, dish description contains the search query, the restaurant name that the dish belongs to contains the search query, and it must belong to a restaurant that is within the circular mile radius distance specified by the search result from the given address, all sorted by average rating.  A SQL query is also done to find all restaurants who have dishes that fit the above criteria, and restaurants within the specified distance.
- /spork/app/views/results/search.html.erb: The associated search view displays the dishes and restaurants organized by rating in a paginized partial.  The user can also change the max distance radius for restaurants they are searching for, which is done in ajax to prevent page refreshes.
- /spork/app/assets/javascripts/results.js: This javascript file handles all of the google map interactions. It adds all of the pin and data to the map, sizes the map based on the bounds of the pins added, and uses AJAX to retrieve the dishes and restaurants from the results_controller to display on the map upon a user change.

At this point the user can change their search query, increase the distance of the search, click on a food item to go to the associated food page, or click on a pin to go to the restaurant page. Let us go to the restaurant page from a pin:

RESTAURANT PAGE: (ex: http://0.0.0.0:3000/restaurant/show/80)
- /spork/app/controllers/restaurant_controller: The restaurant controller handles the controller logic for the restaurant page. 
    - the controller function "show", and it's associated view in views/restaurant/show.html.erb, shows the pictures and information for a restaurant, as well as the top rated items on the menu and reviews for the items.

The user can click on the "Menu" button to arrive at the restaurant's menu page:
	- the controller function "menu", and it's associated view in views/restaurant/menu.html.erb, show all food items *CURRENTLY* on the menu of the restaurant. 
		1) One of the disadvantages of competing sites like Foodspotting is that the majority of items seen on restaurant pages are no longer on the menu due to seasonal menu changes or changes in chefs. Spork allows administrators to update what items are currently on their menu. If the user is an admin for the restaurant, then they can click "Update Menu" to be brought to their admin page to update their menu items (specifics for this page later in README).
		2) For any user, he or she can click "See all food items" to compare and see all food items for that restaurant, whether it is currently on the menu or not. They can then click "See only current menu items" to revert back to the current menu dishes. The logic in the controller under the "menu" function handles this choice to return the correct dish items from the database.
		3) Any user can, at the bottom of the menu, click "Don't see your dish? Add it here" to add a new dish to the menu; they can also add a review as well if they wish in the same popup form. There is also error checking for empty dish names / improper (not a number or < 0) pricing if a price is put - in either or both cases, the appropriate input fields are highlighted red till clicked again, and the error emssages are told to the user as to what to fix. This form submit is handled in the controller under the function addDish

Lets say the admin user clicks "Update Menu". The administrative page is a defining feature which gives Spork a competitive advantage over other sites for restaurant and dish information to remain up to date:
- The edit function in the controller and it's view displays the page with two forms. Let us look at both:
	- The RIGHT form is for updating the restaurant. The admin can change any information which will update in the database. The admin can attach multiple image files (when one image is uploaded, another input field will appear). You can also try saving changes when the Restaurant name field is blank and/or the address field is blank, and see the error checking that ensues. This calls the editRestaurant method in the controller to add the fields to the database and images to the images folder.
	- The left form is for updating the menu. The admin page can see what is currently on the menu on Spork, and what isn't; they can check off any dish they want to update and click the button at the bottom which brings them to the editSelected view. the editSelected method in the controller joins the dishes that were chosen that were on and off the menu, and prepares the dishes for the view. The view create a form of many inputs encapsulated in a table with the values of all the dishes selected. The admin can click the "Currently on Menu" header to toggle all on menu fields, or click each "false" or "true" to toggle it. They can update all other fields as well.  If any dish names are blank or prices are entered that aren't a # or less than 0 and the user tries to submit the form, the text field will highlight red until clicked on again and the form will not submit. This form calls the updateMenu function in the controller to change all of the items in the database based on the new table values.
- /spork/app/assets/javascripts/restaurant.js:  Handles a ton of logic and functionality. Form validations, setting styles based on actions, adding new fields based on user inputs, etc.

Let us go back to the menu page and click on a food item: http://0.0.0.0:3000/restaurant/menu/80:

FOOD PAGE:
	- /spork/app/controllers/food_controller: The food controller handles the controller logic for the food page. The main food view is the view associated with the method index to get the neccessary data for the food item.  A user can add a review for the particular food item, which will display a popup to add a review and call the method in the controller addRating to add the associated pictures to the filesystem and database, and rating to the database.

PROFILE PAGE:
	- /spork/app/controllers/user_controller: The user controller formats the review information for proper display

Finally, you can click on a user name at various point in the site to be brought to the profile page:








